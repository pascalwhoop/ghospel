name: Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main  # Temporary: for testing CI workflow

permissions:
  contents: write

jobs:
  # Build whisper.cpp binaries for each platform
  build-binaries:
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: darwin
            archs: "arm64,amd64"
          - os: ubuntu-latest
            platform: linux
            archs: "amd64"
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache whisper.cpp build
      uses: actions/cache@v4
      with:
        path: whisper_cpp_source/build
        key: whisper-cpp-${{ matrix.platform }}-${{ hashFiles(matrix.archs) }}-${{ hashFiles('.gitmodules') }}-${{ github.sha }}
        restore-keys: |
          whisper-cpp-${{ matrix.platform }}-${{ hashFiles(matrix.archs) }}-${{ hashFiles('.gitmodules') }}-
          whisper-cpp-${{ matrix.platform }}-${{ hashFiles(matrix.archs) }}-

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake make

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake make build-essential ccache
        # For ARM64 cross-compilation
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    - name: Cache ccache
      if: matrix.os == 'ubuntu-latest'
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ccache-${{ matrix.platform }}-${{ hashFiles(matrix.archs) }}-${{ github.sha }}
        restore-keys: |
          ccache-${{ matrix.platform }}-${{ hashFiles(matrix.archs) }}-
          ccache-${{ matrix.platform }}-

    - name: Configure ccache
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "/usr/lib/ccache" >> $GITHUB_PATH
        ccache --set-config=cache_dir=$HOME/.ccache
        ccache --set-config=compression=true
        ccache --set-config=max_size=500M
        ccache --show-stats

    - name: Initialize submodule and build binaries
      run: |
        # Initialize whisper.cpp submodule
        echo "📦 Initializing whisper.cpp submodule..."
        git submodule update --init --recursive
        
        # Create binaries directory
        mkdir -p internal/binaries
        
        # Build for each architecture using our existing build logic
        cd whisper_cpp_source
        IFS=',' read -ra ARCH_ARRAY <<< "${{ matrix.archs }}"
        for arch in "${ARCH_ARRAY[@]}"; do
          echo "Building for ${{ matrix.platform }}-$arch"
          
          binary_name="whisper-cli-${{ matrix.platform }}-$arch"
          target_binary="../internal/binaries/$binary_name"
          
          # Check if binary already exists from cache
          if [ -f "$target_binary" ]; then
            echo "✅ Using cached binary $binary_name"
            continue
          fi
          
          # Set up build directory
          build_dir="build-${{ matrix.platform }}-$arch"
          
          # Set platform-specific flags
          cmake_flags=""
          if [ "${{ matrix.platform }}" = "darwin" ]; then
            if [ "$arch" = "arm64" ]; then
              cmake_flags="-DCMAKE_OSX_ARCHITECTURES=arm64 -DGGML_METAL=ON -DGGML_METAL_EMBED_LIBRARY=ON -DGGML_NATIVE=OFF"
            else
              cmake_flags="-DCMAKE_OSX_ARCHITECTURES=x86_64 -DGGML_METAL=ON -DGGML_METAL_EMBED_LIBRARY=ON -DGGML_NATIVE=OFF -DGGML_AVX=ON -DGGML_AVX2=ON -DGGML_FMA=ON"
            fi
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            cmake_flags="-DGGML_CCACHE=ON -DGGML_NATIVE=OFF"
            if [ "$arch" = "arm64" ]; then
              # ARM64 cross-compilation - aggressively disable all x86 features
              cmake_flags="$cmake_flags -DCMAKE_SYSTEM_PROCESSOR=aarch64 -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ -DGGML_AVX=OFF -DGGML_AVX2=OFF -DGGML_AVX512=OFF -DGGML_FMA=OFF -DGGML_F16C=OFF -DGGML_SSE3=OFF -DGGML_SSSE3=OFF -DGGML_SSE4_1=OFF -DGGML_SSE4_2=OFF -DGGML_NATIVE=OFF -DCMAKE_C_FLAGS='-march=armv8-a' -DCMAKE_CXX_FLAGS='-march=armv8-a'"
            else
              # x86_64 - enable optimizations
              cmake_flags="$cmake_flags -DGGML_AVX=ON -DGGML_AVX2=ON -DGGML_FMA=ON"
            fi
          fi
          
          # Build only if build directory doesn't exist or is incomplete
          if [ ! -f "$build_dir/bin/whisper-cli" ]; then
            echo "🏗️ Building whisper.cpp..."
            cmake -B "$build_dir" $cmake_flags \
              -DCMAKE_BUILD_TYPE=Release \
              -DWHISPER_BUILD_TESTS=OFF \
              -DWHISPER_BUILD_SERVER=OFF
            
            cmake --build "$build_dir" -j$(nproc) --config Release
          else
            echo "✅ Using cached build for $arch"
          fi
          
          # Copy binary
          if [ -f "$build_dir/bin/whisper-cli" ]; then
            cp "$build_dir/bin/whisper-cli" "$target_binary"
            echo "✅ Built $binary_name"
          else
            echo "❌ Failed to build $binary_name"
            exit 1
          fi
        done
        
        # Show ccache stats on Linux
        if [ "${{ matrix.platform }}" = "linux" ]; then
          ccache --show-stats || true
        fi

    - name: Upload binaries as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: whisper-binaries-${{ matrix.platform }}
        path: internal/binaries/whisper-cli-*
        retention-days: 1

  # Release job that combines all binaries
  release:
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download all binary artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Combine binaries
      run: |
        mkdir -p internal/binaries
        find artifacts/ -name "whisper-cli-*" -exec cp {} internal/binaries/ \;
        ls -la internal/binaries/

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: v2.11.0
        args: ${{ startsWith(github.ref, 'refs/tags/') && 'release --clean' || 'release --clean --snapshot' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}